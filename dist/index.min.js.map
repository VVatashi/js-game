{
  "version": 3,
  "sources": ["../_sentry-release-injection-stub", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=a17a6df4-b012-4a7e-b9dc-3adbfd51847c", "../src/js/audio.js", "../src/js/graphics.js", "../src/js/game.js", "../src/js/index.js"],
  "sourceRoot": "https://vvatashi.github.io/js-game/dist/",
  "sourcesContent": ["\n    var _global =\n      typeof window !== 'undefined' ?\n        window :\n        typeof global !== 'undefined' ?\n          global :\n          typeof self !== 'undefined' ?\n            self :\n            {};\n\n    _global.SENTRY_RELEASE={id:\"1d632fa08701c4cd7d08bec4841c368b7bc042a3\"};", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"3ac4a8aa-b137-4121-b57d-61a2f0267583\",e._sentryDebugIdIdentifier=\"sentry-dbid-3ac4a8aa-b137-4121-b57d-61a2f0267583\")}catch(e){}}();", "export class AudioSystem {\r\n    constructor() {\r\n        const context = new AudioContext();\r\n\r\n        const gainNode = context.createGain();\r\n        gainNode.connect(context.destination);\r\n        gainNode.gain.value = 0.2;\r\n\r\n        this.context = context;\r\n        this.gainNode = gainNode;\r\n    }\r\n\r\n    resume() {\r\n        const { context } = this;\r\n        context.resume();\r\n\r\n        return this;\r\n    }\r\n\r\n    suspend() {\r\n        const { context } = this;\r\n        context.suspend();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {AudioBuffer} buffer \r\n     */\r\n    play(buffer, loop = false) {\r\n        const { context, gainNode } = this;\r\n\r\n        const source = context.createBufferSource();\r\n        source.buffer = buffer;\r\n        source.loop = loop;\r\n        source.connect(gainNode);\r\n        source.start();\r\n\r\n        return this;\r\n    }\r\n}\r\n", "export class Renderbuffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        const handle = context.createRenderbuffer();\r\n        context.bindRenderbuffer(context.RENDERBUFFER, handle);\r\n        context.renderbufferStorageMultisample(context.RENDERBUFFER, context.getParameter(context.MAX_SAMPLES), context.RGBA8, width, height);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindRenderbuffer(context.RENDERBUFFER, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteRenderbuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Framebuffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        const handle = context.createFramebuffer();\r\n        context.bindFramebuffer(context.FRAMEBUFFER, handle);\r\n\r\n        context.viewport(0, 0, width, height);\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    attachTexture(texture) {\r\n        const { context, attachment } = this;\r\n\r\n        this.bind();\r\n\r\n        texture.bind();\r\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.TEXTURE_2D, texture.handle, 0);\r\n        this.attachment = texture;\r\n\r\n        this.unbind();\r\n\r\n        attachment?.delete();\r\n\r\n        return this;\r\n    }\r\n\r\n    attachRenderbuffer(renderbuffer) {\r\n        const { context, attachment } = this;\r\n\r\n        this.bind();\r\n\r\n        renderbuffer.bind();\r\n        context.framebufferRenderbuffer(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.RENDERBUFFER, renderbuffer.handle);\r\n        this.attachment = renderbuffer;\r\n\r\n        this.unbind();\r\n\r\n        attachment?.delete();\r\n\r\n        return this;\r\n    }\r\n\r\n    resize(width, height) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        context.viewport(0, 0, width, height);\r\n\r\n        this.unbind();\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    unbind() {\r\n        const { context } = this;\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Framebuffer} framebuffer\r\n     */\r\n    blit(framebuffer) {\r\n        const { context, width, height } = this;\r\n\r\n        context.bindFramebuffer(context.READ_FRAMEBUFFER, this.handle);\r\n        context.bindFramebuffer(context.DRAW_FRAMEBUFFER, framebuffer.handle);\r\n        context.blitFramebuffer(0, 0, width, height, 0, 0, framebuffer.width, framebuffer.height, context.COLOR_BUFFER_BIT, context.LINEAR);\r\n        context.bindFramebuffer(context.READ_FRAMEBUFFER, null);\r\n        context.bindFramebuffer(context.DRAW_FRAMEBUFFER, null);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteFramebuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {string} source\r\n     */\r\n    constructor(context, type, source) {\r\n        const handle = context.createShader(type);\r\n        context.shaderSource(handle, source);\r\n        context.compileShader(handle);\r\n\r\n        if (!context.getShaderParameter(handle, context.COMPILE_STATUS)) {\r\n            throw new Error(\"Can't compile shader: \" + context.getShaderInfoLog(handle));\r\n        }\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteShader(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ShaderProgram {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {string} vertexShaderSource\r\n     * @param {string} fragmentShaderSource\r\n     */\r\n    constructor(context, vertexShaderSource, fragmentShaderSource) {\r\n        const vertexShader = new Shader(context, context.VERTEX_SHADER, vertexShaderSource);\r\n        const fragmentShader = new Shader(context, context.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n        const handle = context.createProgram();\r\n        context.attachShader(handle, vertexShader.handle);\r\n        context.attachShader(handle, fragmentShader.handle);\r\n        context.linkProgram(handle);\r\n\r\n        if (!context.getProgramParameter(handle, context.LINK_STATUS)) {\r\n            throw new Error(\"Can't link shader program: \" + context.getProgramInfoLog(handle));\r\n        }\r\n\r\n        vertexShader.delete();\r\n        fragmentShader.delete();\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.uniformLocationCache = {};\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.useProgram(handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    getUniformLocation(name) {\r\n        const { context, handle, uniformLocationCache } = this;\r\n\r\n        if (name in uniformLocationCache) return uniformLocationCache[name];\r\n\r\n        return uniformLocationCache[name] = context.getUniformLocation(handle, name);\r\n    }\r\n\r\n    setUniform(name, value) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        if (typeof value === 'boolean') {\r\n            context.uniform1i(location, value ? 1 : 0);\r\n        } else {\r\n            context.uniform1f(location, value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    setUniformInteger(name, value) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        context.uniform1i(location, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    setUniformMatrix(name, value, transpose = false) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        context.uniformMatrix4fv(location, transpose, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteProgram(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Texture {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, type, width, height, internalFormat = context.RGBA8) {\r\n        const handle = context.createTexture();\r\n        context.activeTexture(context.TEXTURE0);\r\n        context.bindTexture(type, handle);\r\n\r\n        context.texImage2D(type, 0, internalFormat, width, height, 0, context.RGBA, context.UNSIGNED_BYTE, null);\r\n\r\n        context.texParameteri(type, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\r\n        context.texParameteri(type, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\r\n        context.texParameteri(type, context.TEXTURE_WRAP_R, context.CLAMP_TO_EDGE);\r\n\r\n        context.texParameteri(type, context.TEXTURE_MIN_FILTER, context.LINEAR);\r\n        context.texParameteri(type, context.TEXTURE_MAG_FILTER, context.LINEAR);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.type = type;\r\n    }\r\n\r\n    bind(textureUnit = 0) {\r\n        const { context, handle, type } = this;\r\n\r\n        context.activeTexture(textureUnit + context.TEXTURE0);\r\n        context.bindTexture(type, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLImageElement} image\r\n     */\r\n    setImage(image) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.texSubImage2D(type, 0, 0, 0, context.RGBA, context.UNSIGNED_BYTE, image);\r\n        context.texParameteri(type, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\r\n        context.generateMipmap(type);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteTexture(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Buffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    constructor(context, type, data, usage = context.STATIC_DRAW) {\r\n        const handle = context.createBuffer();\r\n        context.bindBuffer(type, handle);\r\n        context.bufferData(type, data, usage);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.type = type;\r\n        this.usage = usage;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle, type } = this;\r\n\r\n        context.bindBuffer(type, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    setData(data) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.bufferData(type, data, this.usage);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     * @param {number} offset\r\n     * @param {number} count\r\n     */\r\n    setDataRange(data, offset, count) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.bufferSubData(type, offset, data, 0, count);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteBuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class VertexAttribute {\r\n    /**\r\n     * @param {number} elements\r\n     * @param {number} type\r\n     * @param {boolean} normalized\r\n     * @param {number} offset\r\n     * @param {number} stride\r\n     */\r\n    constructor(elements, type, normalized, stride, offset) {\r\n        this.elements = elements;\r\n        this.type = type;\r\n        this.normalized = normalized;\r\n        this.stride = stride;\r\n        this.offset = offset;\r\n    }\r\n}\r\n\r\nexport class VertexArray {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {Buffer} buffer\r\n     * @param {VertexAttribute[]} vertexAttributes\r\n     */\r\n    constructor(context, buffer, vertexAttributes) {\r\n        const handle = context.createVertexArray();\r\n        context.bindVertexArray(handle);\r\n        buffer.bind();\r\n\r\n        for (let i = 0; i < vertexAttributes.length; i++) {\r\n            context.enableVertexAttribArray(i);\r\n\r\n            const vertexAttribute = vertexAttributes[i];\r\n            context.vertexAttribPointer(i, vertexAttribute.elements, vertexAttribute.type, vertexAttribute.normalized, vertexAttribute.stride, vertexAttribute.offset);\r\n        }\r\n\r\n        context.bindVertexArray(null);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindVertexArray(handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    unnbind() {\r\n        const { context } = this;\r\n\r\n        context.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} vertexCount\r\n     */\r\n    draw(vertexCount) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        context.drawArrays(context.TRIANGLES, 0, vertexCount);\r\n\r\n        this.unnbind();\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteVertexArray(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Mesh {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} vertexCount\r\n     * @param {VertexAttribute[]} vertexAttributes\r\n     * @param {number} usage\r\n     */\r\n    constructor(context, vertexCount, vertexAttributes, usage = context.STATIC_DRAW) {\r\n        let vertexElements = 0;\r\n        for (const vertexAttribute of vertexAttributes) {\r\n            vertexElements += vertexAttribute.elements;\r\n        }\r\n\r\n        const vertexBuffer = new Buffer(context, context.ARRAY_BUFFER, new Float32Array(vertexElements * vertexCount), usage);\r\n        const vertexArray = new VertexArray(context, vertexBuffer, vertexAttributes);\r\n\r\n        this.context = context;\r\n        this.vertexCount = vertexCount;\r\n        this.vertexArray = vertexArray;\r\n        this.vertexBuffer = vertexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    setData(data) {\r\n        this.vertexBuffer.setData(data);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     * @param {number} offset\r\n     * @param {number} count\r\n     */\r\n    setDataRange(data, offset, count) {\r\n        this.vertexBuffer.setDataRange(data, offset, count);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} vertexCount\r\n     */\r\n    draw(vertexCount = null) {\r\n        this.vertexArray.draw(vertexCount || this.vertexCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        this.vertexArray.delete();\r\n        this.vertexBuffer.delete();\r\n    }\r\n}\r\n\r\nexport class Font {\r\n    constructor() {\r\n        this.glyphs = {};\r\n    }\r\n\r\n    deserializeDataFromCSV(data, atlasWidth, atlasHeight) {\r\n        const lines = data.split('\\n');\r\n        for (const line of lines) {\r\n            const values = line.split(',');\r\n\r\n            if (values.length !== 10) continue;\r\n\r\n            const charCode = Number(values[0]);\r\n            const advance = Number(values[1]);\r\n            const planeLeft = Number(values[2]);\r\n            const planeBottom = 1.0 - Number(values[3]);\r\n            const planeRight = Number(values[4]);\r\n            const planeTop = 1.0 - Number(values[5]);\r\n            const atlasLeft = Number(values[6]) / atlasWidth;\r\n            const atlasBottom = 1.0 - Number(values[7]) / atlasHeight;\r\n            const atlasRight = Number(values[8]) / atlasWidth;\r\n            const atlasTop = 1.0 - Number(values[9]) / atlasHeight;\r\n\r\n            this.glyphs[charCode] = { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    deserializeData(data) {\r\n        const buffer = new Float32Array(data);\r\n\r\n        let index = 0;\r\n        const count = buffer[index++];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const charCode = buffer[index++];\r\n            const advance = buffer[index++];\r\n            const planeLeft = buffer[index++];\r\n            const planeBottom = buffer[index++];\r\n            const planeRight = buffer[index++];\r\n            const planeTop = buffer[index++];\r\n            const atlasLeft = buffer[index++];\r\n            const atlasBottom = buffer[index++];\r\n            const atlasRight = buffer[index++];\r\n            const atlasTop = buffer[index++];\r\n\r\n            this.glyphs[charCode] = { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    serializeData() {\r\n        const glyphs = Object.values(this.glyphs);\r\n        const data = [glyphs.length];\r\n        for (const glyph of glyphs) {\r\n            const { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop } = glyph;\r\n            data.push(charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop);\r\n        }\r\n\r\n        return new Float32Array(data);\r\n    }\r\n}\r\n\r\nexport class Renderer {\r\n    MAX_VERTICES = 65535;\r\n    VERTEX_ELEMENTS = 8;\r\n\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        this.context = context;\r\n        this.vertices = new Float32Array(this.VERTEX_ELEMENTS * this.MAX_VERTICES);\r\n        this.mesh = new Mesh(context, this.MAX_VERTICES, [\r\n            new VertexAttribute(2, context.FLOAT, false, 8 * 4, 0),\r\n            new VertexAttribute(2, context.FLOAT, false, 8 * 4, 2 * 4),\r\n            new VertexAttribute(4, context.FLOAT, false, 8 * 4, 4 * 4),\r\n        ], context.DYNAMIC_DRAW);\r\n\r\n        context.enable(context.BLEND);\r\n        context.blendFunc(context.SRC_ALPHA, context.ONE_MINUS_SRC_ALPHA);\r\n\r\n        this.resize(width, height);\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.matrix = this.createOrthographicOffCenter(0, width, height, 0, -1, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    createOrthographicOffCenter(left, right, bottom, top, near, far) {\r\n        const leftRight = 1 / (left - right);\r\n        const bottomTop = 1 / (bottom - top);\r\n        const nearFar = 1 / (near - far);\r\n\r\n        const scaleX = -2 * leftRight;\r\n        const scaleY = -2 * bottomTop;\r\n        const scaleZ = 2 * nearFar;\r\n\r\n        const translateX = (left + right) * leftRight;\r\n        const translateY = (top + bottom) * bottomTop;\r\n        const translateZ = (far + near) * nearFar;\r\n\r\n        return [\r\n            scaleX, 0, 0, 0,\r\n            0, scaleY, 0, 0,\r\n            0, 0, scaleZ, 0,\r\n            translateX, translateY, translateZ, 1,\r\n        ];\r\n    }\r\n\r\n    clear(r, g, b, a) {\r\n        const { context } = this;\r\n\r\n        context.clearColor(r, g, b, a);\r\n        context.clear(context.COLOR_BUFFER_BIT);\r\n\r\n        return this;\r\n    }\r\n\r\n    beginGeometry() {\r\n        this.vertexCount = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n    endGeometry() {\r\n        const { VERTEX_ELEMENTS, vertexCount, vertices } = this;\r\n\r\n        if (vertexCount === 0) return;\r\n\r\n        this.mesh.setDataRange(vertices, 0, VERTEX_ELEMENTS * vertexCount);\r\n        this.mesh.draw(vertexCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    addVertex(\r\n        _x, _y,\r\n        _u, _v,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        const { VERTEX_ELEMENTS, vertexCount, vertices } = this;\r\n\r\n        for (let i = 0; i < VERTEX_ELEMENTS; i++)\r\n            vertices[VERTEX_ELEMENTS * vertexCount + i] = arguments[i];\r\n\r\n        this.vertexCount++;\r\n\r\n        return this;\r\n    }\r\n\r\n    drawTriangle(\r\n        ax, ay, au, av,\r\n        bx, by, bu, bv,\r\n        cx, cy, cu, cv,\r\n        r, g, b, a\r\n    ) {\r\n        const { MAX_VERTICES, vertexCount } = this;\r\n\r\n        if (vertexCount + 3 >= MAX_VERTICES) {\r\n            this.endGeometry().beginGeometry();\r\n        }\r\n\r\n        return this\r\n            .addVertex(ax, ay, au, av, r, g, b, a)\r\n            .addVertex(bx, by, bu, bv, r, g, b, a)\r\n            .addVertex(cx, cy, cu, cv, r, g, b, a);\r\n    }\r\n\r\n    drawQuad(\r\n        ax, ay, au, av,\r\n        bx, by, bu, bv,\r\n        cx, cy, cu, cv,\r\n        dx, dy, du, dv,\r\n        r, g, b, a\r\n    ) {\r\n        return this\r\n            .drawTriangle(\r\n                ax, ay, au, av,\r\n                bx, by, bu, bv,\r\n                cx, cy, cu, cv,\r\n                r, g, b, a\r\n            )\r\n            .drawTriangle(\r\n                ax, ay, au, av,\r\n                cx, cy, cu, cv,\r\n                dx, dy, du, dv,\r\n                r, g, b, a\r\n            );\r\n    }\r\n\r\n    drawRectangle(x, y, width, height, u0, v0, u1, v1, r, g, b, a) {\r\n        const ax = x;\r\n        const ay = y;\r\n\r\n        const bx = x + width;\r\n        const by = y;\r\n\r\n        const cx = x + width;\r\n        const cy = y + height;\r\n\r\n        const dx = x;\r\n        const dy = y + height;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    drawRectangleOffCenter(x, y, width, height, u0, v0, u1, v1, r, g, b, a) {\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n\r\n        const ax = x - halfWidth;\r\n        const ay = y - halfHeight;\r\n\r\n        const bx = x + halfWidth;\r\n        const by = y - halfHeight;\r\n\r\n        const cx = x + halfWidth;\r\n        const cy = y + halfHeight;\r\n\r\n        const dx = x - halfWidth;\r\n        const dy = y + halfHeight;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    drawRotatedRectangleOffCenter(x, y, width, height, angle, u0, v0, u1, v1, r, g, b, a) {\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n\r\n        const sinA = Math.sin(angle);\r\n        const cosA = Math.cos(angle);\r\n\r\n        const ax0 = -halfWidth;\r\n        const ay0 = -halfHeight;\r\n\r\n        const bx0 = halfWidth;\r\n        const by0 = -halfHeight;\r\n\r\n        const cx0 = halfWidth;\r\n        const cy0 = halfHeight;\r\n\r\n        const dx0 = -halfWidth;\r\n        const dy0 = halfHeight;\r\n\r\n        const ax = x + cosA * ax0 - sinA * ay0;\r\n        const ay = y + sinA * ax0 + cosA * ay0;\r\n\r\n        const bx = x + cosA * bx0 - sinA * by0;\r\n        const by = y + sinA * bx0 + cosA * by0;\r\n\r\n        const cx = x + cosA * cx0 - sinA * cy0;\r\n        const cy = y + sinA * cx0 + cosA * cy0;\r\n\r\n        const dx = x + cosA * dx0 - sinA * dy0;\r\n        const dy = y + sinA * dx0 + cosA * dy0;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} charCode\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawChar(font, x, y, charCode, size, r, g, b, a) {\r\n        const glyph = font.glyphs[charCode];\r\n        if (typeof glyph === 'undefined' || glyph === null) {\r\n            return this;\r\n        }\r\n\r\n        return this.drawRectangle(\r\n            x + size * glyph.planeLeft,\r\n            y + size * glyph.planeTop,\r\n            size * (glyph.planeRight - glyph.planeLeft),\r\n            size * (glyph.planeBottom - glyph.planeTop),\r\n            glyph.atlasLeft, glyph.atlasTop, glyph.atlasRight, glyph.atlasBottom,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawString(font, x, y, str, size, r, g, b, a) {\r\n        let offset = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const charCode = str.charCodeAt(i);\r\n            const glyph = font.glyphs[charCode];\r\n            if (typeof glyph === 'undefined' || glyph === null) {\r\n                continue;\r\n            }\r\n\r\n            this.drawChar(font, x + offset, y, charCode, size, r, g, b, a);\r\n            offset += size * glyph.advance;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} maxWidth\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawStringOffCenter(font, x, y, str, size, r, g, b, a) {\r\n        const width = this.measureString(font, str, size);\r\n        return this.drawString(font, x - width / 2, y, str, size, r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {string} str\r\n     * @param {number} size\r\n     */\r\n    measureString(font, str, size) {\r\n        let width = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const charCode = str.charCodeAt(i);\r\n            const glyph = font.glyphs[charCode];\r\n            if (typeof glyph === 'undefined' || glyph === null) {\r\n                continue;\r\n            }\r\n\r\n            width += size * glyph.advance;\r\n        }\r\n\r\n        return width;\r\n    }\r\n\r\n    delete() {\r\n        this.mesh.delete();\r\n    }\r\n}\r\n\r\nexport class SpriteBatch {\r\n    /**\r\n     * @param {Renderer} renderer\r\n     */\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.buckets = new Map();\r\n    }\r\n\r\n    begin() {\r\n        this.buckets.clear();\r\n\r\n        return this;\r\n    }\r\n\r\n    end() {\r\n        for (const [texture, commands] of this.buckets.entries()) {\r\n            texture.bind();\r\n            this.renderer.beginGeometry();\r\n\r\n            for (const { name, args } of commands)\r\n                this.renderer[name](...args);\r\n\r\n            this.renderer.endGeometry();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    addCommand(texture, name, args) {\r\n        const command = { name, args };\r\n\r\n        if (this.buckets.has(texture))\r\n            this.buckets.get(texture).push(command);\r\n        else\r\n            this.buckets.set(texture, [command]);\r\n\r\n        return this;\r\n    }\r\n\r\n    drawTriangle(\r\n        texture,\r\n        _ax, _ay, _au, _av,\r\n        _bx, _by, _bu, _bv,\r\n        _cx, _cy, _cu, _cv,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawTriangle', [...arguments].slice(1));\r\n    }\r\n\r\n    drawQuad(\r\n        texture,\r\n        _ax, _ay, _au, _av,\r\n        _bx, _by, _bu, _bv,\r\n        _cx, _cy, _cu, _cv,\r\n        _dx, _dy, _du, _dv,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawQuad', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRectangle(\r\n        texture,\r\n        _x, _y, _width, _height,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawRectangle', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRectangleOffCenter(\r\n        texture,\r\n        _x, _y, _width, _height,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawRectangleOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRotatedRectangleOffCenter(\r\n        texture,\r\n        _x, _y, _width, _height, _angle,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawRotatedRectangleOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} charCode\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawChar(texture, _font, _x, _y, _charCode, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawChar', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawString(texture, _font, _x, _y, _str, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawString', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} maxWidth\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawStringOffCenter(texture, _font, _x, _y, _str, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawStringOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {string} str\r\n     * @param {number} size\r\n     */\r\n    measureString(font, str, size) {\r\n        return this.renderer.measureString(font, str, size);\r\n    }\r\n}\r\n", "import { AudioSystem } from './audio.js';\r\nimport { ShaderProgram, Framebuffer, Renderbuffer, Texture, Font, Renderer, SpriteBatch } from './graphics.js';\r\n\r\nclass GameObject {\r\n    get objectType() { return 'GameObject'; }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) { }\r\n\r\n    draw() { }\r\n}\r\n\r\nclass Ball extends GameObject {\r\n    static types = [\r\n        { texture: 'ball0', score: 1 },\r\n        { texture: 'ball1', score: 2 },\r\n        { texture: 'ball2', score: 3 },\r\n        { texture: 'ball3', score: 4 },\r\n        { texture: 'ball4', score: 5 },\r\n        { texture: 'ball5', score: 6 },\r\n        { texture: 'ball6', score: 7 },\r\n        { texture: 'ball7', score: 8 },\r\n    ];\r\n\r\n    get objectType() { return 'Ball'; }\r\n\r\n    constructor(x, y, radius, velocityX, velocityY, type) {\r\n        super();\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n\r\n        this.radius = radius;\r\n\r\n        this.velocityX = velocityX;\r\n        this.velocityY = velocityY;\r\n\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        if (paused) {\r\n            return;\r\n        }\r\n\r\n        if (state === 'idle' || state === 'shot') {\r\n            this.x += this.velocityX * deltaTime;\r\n            this.y += this.velocityY * deltaTime;\r\n        }\r\n\r\n        if (projectile !== null && state === 'shot') {\r\n            const distanceX = projectile.x - this.x;\r\n            const distanceY = projectile.y - this.y;\r\n            const distance = magnitude(distanceX, distanceY);\r\n            const [directionX, directionY] = normalize(distanceX, distanceY);\r\n            if (distance < 30) {\r\n                this.offsetX = 0.9 * this.offsetX + 0.1 * (-250 / (distanceX * distanceX + distanceY * distanceY) * directionX);\r\n                this.offsetY = 0.9 * this.offsetY + 0.1 * (-250 / (distanceX * distanceX + distanceY * distanceY) * directionY);\r\n            } else {\r\n                this.offsetX *= 0.975;\r\n                this.offsetY *= 0.975;\r\n            }\r\n        } else {\r\n            this.offsetX *= 0.975;\r\n            this.offsetY *= 0.975;\r\n        }\r\n\r\n    }\r\n\r\n    draw() {\r\n        super.draw();\r\n\r\n        const texture = textures[Ball.types[this.type].texture];\r\n        const [x, y] = positionWorldToScreen(this.x, this.y);\r\n        const [w, h] = sizeWorldToScreen(2 * this.radius, 2 * this.radius);\r\n        spriteBatch.drawRectangleOffCenter(texture, x + this.offsetX, y + this.offsetY, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    }\r\n}\r\n\r\nclass Projectile extends Ball {\r\n    get objectType() { return 'Projectile'; }\r\n\r\n    constructor(x, y, radius, velocityX, velocityY, texture, type) {\r\n        super(x, y, radius, velocityX, velocityY, texture, type);\r\n\r\n        this.angle = 0;\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        if (paused) {\r\n            return;\r\n        }\r\n\r\n        if (this.x - this.radius < -levelWidth / 2 && this.velocityX < 0\r\n            || this.x + this.radius > levelWidth / 2 && this.velocityX > 0) {\r\n            this.velocityX = -this.velocityX;\r\n            playImpactSound();\r\n        }\r\n\r\n        if (state === 'shot')\r\n            this.angle += deltaTime / 100;\r\n    }\r\n\r\n    draw() {\r\n        const texture = textures[Ball.types[this.type].texture];\r\n        const [x, y] = positionWorldToScreen(this.x, this.y);\r\n        const [w, h] = sizeWorldToScreen(2 * this.radius, 2 * this.radius);\r\n        spriteBatch.drawRotatedRectangleOffCenter(texture, x, y, w, h, this.angle, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    }\r\n}\r\n\r\nclass Particle extends Ball {\r\n    get objectType() { return 'Particle'; }\r\n\r\n    constructor(x, y, radius, velocityX, velocityY, texture, type) {\r\n        super(x, y, radius, velocityX, velocityY, texture, type);\r\n\r\n        this.lifetime = 250 * Math.random();\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        if (paused) {\r\n            return;\r\n        }\r\n\r\n        this.x += this.velocityX * deltaTime;\r\n        this.y += this.velocityY * deltaTime;\r\n\r\n        this.velocityY += 0.000002 * deltaTime * deltaTime;\r\n\r\n        this.lifetime -= deltaTime;\r\n        if (this.lifetime <= 0 || this.y - this.radius > 100) {\r\n            removeObject(this);\r\n        }\r\n    }\r\n}\r\n\r\nclass FallingBall extends Ball {\r\n    get objectType() { return 'FallingBall'; }\r\n\r\n    constructor(x, y, radius, velocityX, velocityY, texture, type) {\r\n        super(x, y, radius, velocityX, velocityY, texture, type);\r\n\r\n        this.lifetime = 5000;\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        if (paused) {\r\n            return;\r\n        }\r\n\r\n        this.x += this.velocityX * deltaTime;\r\n        this.y += this.velocityY * deltaTime;\r\n\r\n        this.velocityY += 0.000002 * deltaTime * deltaTime;\r\n\r\n        this.lifetime -= deltaTime;\r\n        if (this.lifetime <= 0 || this.y - this.radius > 100) {\r\n            removeObject(this);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        const texture = textures[Ball.types[this.type].texture];\r\n        const [x, y] = positionWorldToScreen(this.x, this.y);\r\n        const [w, h] = sizeWorldToScreen(2 * this.radius, 2 * this.radius);\r\n        const alpha = (this.lifetime / 5000);\r\n        spriteBatch.drawRectangleOffCenter(texture, x, y, w, h, 0, 0, 1, 1, 1, 1, 1, alpha);\r\n    }\r\n}\r\n\r\nclass ExplodingBall extends Ball {\r\n    get objectType() { return 'ExplodingBall'; }\r\n\r\n    constructor(x, y, radius, velocityX, velocityY, texture, type) {\r\n        super(x, y, radius, velocityX, velocityY, texture, type);\r\n\r\n        this.lifetime = 200;\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        if (paused) {\r\n            return;\r\n        }\r\n\r\n        this.x += this.velocityX * deltaTime;\r\n        this.y += this.velocityY * deltaTime;\r\n\r\n        this.radius *= 1.05;\r\n        this.lifetime -= deltaTime;\r\n        if (this.lifetime <= 0 || this.y - this.radius > 100) {\r\n            removeObject(this);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        const texture = textures[Ball.types[this.type].texture];\r\n        const [x, y] = positionWorldToScreen(this.x, this.y);\r\n        const [w, h] = sizeWorldToScreen(2 * this.radius, 2 * this.radius);\r\n        const alpha = (this.lifetime / 200);\r\n        spriteBatch.drawRectangleOffCenter(texture, x, y, w, h, 0, 0, 1, 1, 1, 1, 1, alpha);\r\n    }\r\n}\r\n\r\nconst SCENE_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nuniform mat4 matrix;\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    gl_Position = matrix * vec4(position, 0, 1);\r\n\r\n    fragTexCoords = texCoords;\r\n    fragColor = color;\r\n}\r\n`;\r\n\r\nconst SCENE_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D colorTexture;\r\n\r\nin vec2 fragTexCoords;\r\nin vec4 fragColor;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    color = fragColor * texture(colorTexture, fragTexCoords);\r\n}\r\n`;\r\n\r\nconst FONT_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nuniform mat4 matrix;\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    gl_Position = matrix * vec4(position, 0.0, 1.0);\r\n\r\n    fragTexCoords = texCoords;\r\n    fragColor = color;\r\n}\r\n`;\r\n\r\nconst FONT_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D msdfTexture;\r\nuniform float screenPxRange;\r\nuniform float outlineBias;\r\n\r\nin vec2 fragTexCoords;\r\nin vec4 fragColor;\r\n\r\nout vec4 color;\r\n\r\nfloat median(float r, float g, float b) {\r\n    return max(min(r, g), min(max(r, g), b));\r\n}\r\n\r\nvoid main() {\r\n    vec4 msd = texture(msdfTexture, fragTexCoords);\r\n\r\n    float hardDistance = median(msd.r, msd.g, msd.a);\r\n    float softDistance = msd.a;\r\n\r\n    float inner = screenPxRange * (hardDistance - 0.5) + 0.5;\r\n    float outer = screenPxRange * (softDistance - 0.5 + outlineBias) + 0.5;\r\n\r\n    float innerOpacity = clamp(inner, 0.0, 1.0);\r\n    float outerOpacity = clamp(outer, 0.0, 1.0);\r\n\r\n    color = fragColor * innerOpacity + vec4(vec3(0.0), 1.0) * outerOpacity;\r\n}\r\n`;\r\n\r\nconst BLUR_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position, 0, 1);\r\n\r\n    fragTexCoords = texCoords;\r\n}\r\n`;\r\n\r\nconst BLUR_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nconst float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nuniform sampler2D colorTexture;\r\nuniform bool horizontal;\r\n\r\nin vec2 fragTexCoords;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    vec2 texelSize = 1.0 / vec2(textureSize(colorTexture, 0));\r\n    vec3 result = texture(colorTexture, fragTexCoords).rgb * weight[0];\r\n\r\n    if (horizontal) {\r\n        for (int i = 1; i < 5; i++) {\r\n            result += texture(colorTexture, fragTexCoords + vec2(texelSize.x * float(i), 0.0)).rgb * weight[i];\r\n            result += texture(colorTexture, fragTexCoords - vec2(texelSize.x * float(i), 0.0)).rgb * weight[i];\r\n        }\r\n    } else {\r\n        for (int i = 1; i < 5; i++) {\r\n            result += texture(colorTexture, fragTexCoords + vec2(0.0, texelSize.y * float(i))).rgb * weight[i];\r\n            result += texture(colorTexture, fragTexCoords - vec2(0.0, texelSize.y * float(i))).rgb * weight[i];\r\n        }\r\n    }\r\n\r\n    color = vec4(result, 1.0);\r\n}\r\n`;\r\n\r\nconst SCREEN_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position, 0.0, 1.0);\r\n\r\n    fragTexCoords = texCoords;\r\n}\r\n`;\r\n\r\nconst SCREEN_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D colorTexture;\r\nuniform sampler2D blurTexture;\r\n\r\nuniform float blurBrightness;\r\n\r\nin vec2 fragTexCoords;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    vec3 result = texture(colorTexture, fragTexCoords).rgb + blurBrightness * texture(blurTexture, fragTexCoords).rgb;\r\n    color = vec4(pow(result, vec3(1.0 / 2.2)), 1.0);\r\n}\r\n`;\r\n\r\n/** @type {HTMLCanvasElement} */\r\nlet canvas = null;\r\n\r\n/** @type {WebGL2RenderingContext} */\r\nlet context = null;\r\n\r\n/** @type {number} */\r\nlet prevTimestamp = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet sceneShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet screenShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet fontShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet blurShaderProgram = null;\r\n\r\n/** @type {Object.<string, Texture>} */\r\nconst textures = {};\r\n\r\n/** @type {Font} */\r\nlet font = null;\r\n\r\n/** @type {Renderer} */\r\nlet renderer = null;\r\n\r\n/** @type {SpriteBatch} */\r\nlet spriteBatch = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet framebufferMultisample = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet framebuffer = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet pingFramebuffer = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet pongFramebuffer = null;\r\n\r\n/** @type {AudioSystem} */\r\nlet audioSystem = null\r\n\r\n/** @type {AudioBuffer[]} */\r\nlet impactSounds = [];\r\n\r\nlet nextImpactSound = 0;\r\n\r\n/** @type {GameObject[]} */\r\nlet gameObjects = [];\r\n\r\n/** @type {Ball[]} */\r\nlet firstLayer = [];\r\n\r\n/** @type {Projectile} */\r\nlet projectile = null;\r\n\r\nlet nextProjectileType = 0;\r\n\r\nlet state = 'start';\r\n\r\nconst ballRadius = 4;\r\nconst levelWidth = 45;\r\n\r\nlet difficulty = 1;\r\nlet score = 0;\r\nlet levelStartScore = 0;\r\n\r\nlet cursorX = 0;\r\nlet cursorY = 0;\r\n\r\nlet showTrajectory = false;\r\nlet paused = false;\r\n\r\nconst LEADERBOARD = 'puzzlebobble';\r\n\r\nlet player = null;\r\n\r\nconst backgrounds = [\r\n    { textureName: 'background_0', blurTextureName: 'background_0_blur' },\r\n    { textureName: 'background_1', blurTextureName: 'background_1_blur' },\r\n    { textureName: 'background_2', blurTextureName: 'background_2_blur' },\r\n];\r\n\r\nlet backgroundIndex = 0;\r\n\r\nconst PADDING_BOTTOM = 109;\r\n\r\nconst translations = {\r\n    ru: {\r\n        newGame: '\u041D\u043E\u0432\u0430\u044F \u0438\u0433\u0440\u0430',\r\n        continue: '\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C',\r\n        level: '\u0423\u0440\u043E\u0432\u0435\u043D\u044C',\r\n        win: '\u041F\u043E\u0431\u0435\u0434\u0430',\r\n        fail: '\u041F\u043E\u0440\u0430\u0436\u0435\u043D\u0438\u0435',\r\n        press: '\u041D\u0430\u0436\u043C\u0438\u0442\u0435',\r\n        toStartGame: '\u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0447\u0430\u0442\u044C \u0438\u0433\u0440\u0443',\r\n        toContinue: '\u0447\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C',\r\n    },\r\n    en: {\r\n        newGame: 'New Game',\r\n        continue: 'Continue',\r\n        level: 'Level',\r\n        win: 'Win',\r\n        fail: 'Fail',\r\n        press: 'Press',\r\n        toStartGame: 'to start game',\r\n        toContinue: 'to continue',\r\n    },\r\n};\r\n\r\nlet language = 'en';\r\n\r\nasync function loadText(url) {\r\n    const response = await fetch(url);\r\n    return response.text();\r\n}\r\n\r\nasync function loadBinary(url) {\r\n    const response = await fetch(url);\r\n    return response.arrayBuffer();\r\n}\r\n\r\nfunction loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image();\r\n        image.addEventListener('load', () => resolve(image));\r\n        image.loading = 'eager';\r\n        image.src = url;\r\n    });\r\n}\r\n\r\nasync function loadAudio(url) {\r\n    const response = await fetch(url);\r\n    const buffer = await response.arrayBuffer();\r\n    return audioSystem.context.decodeAudioData(buffer);\r\n}\r\n\r\nfunction positionWorldToScreen(x, y) {\r\n    const offsetX = renderer.width / 2;\r\n    const offsetY = -PADDING_BOTTOM;\r\n    const scale = renderer.height / 100;\r\n    return [scale * x + offsetX, scale * y + offsetY];\r\n}\r\n\r\nfunction positionScreenToWorld(x, y) {\r\n    const offsetX = renderer.width / 2;\r\n    const offsetY = -PADDING_BOTTOM;\r\n    const scale = renderer.height / 100;\r\n    return [(x - offsetX) / scale, (y - offsetY) / scale];\r\n}\r\n\r\nfunction sizeWorldToScreen(x, y) {\r\n    const scale = renderer.height / 100;\r\n    return [scale * x, scale * y];\r\n}\r\n\r\nfunction sizeScreenToWorld(x, y) {\r\n    const scale = renderer.height / 100;\r\n    return [x / scale, y / scale];\r\n}\r\n\r\nfunction dot(x0, y0, x1, y1) {\r\n    return x0 * x1 + y0 * y1;\r\n}\r\n\r\nfunction dot2(x, y) {\r\n    return x * x + y * y;\r\n}\r\n\r\nfunction magnitude(x, y) {\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\nfunction normalize(x, y) {\r\n    const length = magnitude(x, y);\r\n    return [x / length, y / length];\r\n}\r\n\r\nfunction getBallTypesOnBoard() {\r\n    const types = new Set();\r\n    for (const gameObject of gameObjects) {\r\n        if (gameObject.objectType !== 'Ball') continue;\r\n\r\n        types.add(gameObject.type);\r\n    }\r\n\r\n    return [...types];\r\n}\r\n\r\nfunction getBallAt(balls, x, y) {\r\n    for (const ball of balls) {\r\n        if (dot2(x - ball.x, y - ball.y) < 1.25 * ball.radius * ball.radius) {\r\n            return ball;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction raycastBall(balls, x, y, dx, dy) {\r\n    let ball = null;\r\n    let step = 0;\r\n    while (ball === null && step < 128) {\r\n        ball = getBallAt(balls, x, y);\r\n\r\n        x += dx * ballRadius / 2;\r\n        y += dy * ballRadius / 2;\r\n\r\n        if (x - ballRadius < -levelWidth / 2 || x + ballRadius > levelWidth / 2) {\r\n            dx = -dx;\r\n        }\r\n\r\n        step++;\r\n    }\r\n\r\n    return ball;\r\n}\r\n\r\nfunction getNextProjectileTypes() {\r\n    const balls = gameObjects.filter(gameObject => gameObject.objectType === 'Ball');\r\n    const foundSet = new Set();\r\n    const y0 = -5;\r\n    for (let x0 = -10; x0 < 10; x0++) {\r\n        const [x, y] = normalize(x0, y0);\r\n        const ball = raycastBall(balls, 0, 90, x, y);\r\n        if (ball !== null)\r\n            foundSet.add(ball);\r\n    }\r\n\r\n    const found = [];\r\n    for (const ball of [...foundSet]) {\r\n        // Increase probability of balls with more linked balls of the same type\r\n        const linkedCount = getLinkedBallsOfSameType(ball).length;\r\n        for (let i = 0; i < linkedCount; i++)\r\n            found.push(ball);\r\n    }\r\n\r\n    return found.map(ball => ball.type);\r\n}\r\n\r\nfunction getNextProjectileType() {\r\n    const types = getNextProjectileTypes();\r\n    if (types.length === 0) {\r\n        const typesOnBoard = getBallTypesOnBoard();\r\n        if (typesOnBoard.length === 0)\r\n            return 0;\r\n\r\n        return typesOnBoard[Math.floor(typesOnBoard.length * Math.random())];\r\n    }\r\n\r\n    return types[Math.floor(types.length * Math.random())];\r\n}\r\n\r\nfunction createOrResetProjectile() {\r\n    gameObjects = gameObjects.filter(gameObject => gameObject !== projectile);\r\n\r\n    const typesOnBoard = getBallTypesOnBoard();\r\n    const currentType = typesOnBoard.length > 0 && typesOnBoard.includes(nextProjectileType) ? nextProjectileType : getNextProjectileType();\r\n    nextProjectileType = getNextProjectileType();\r\n\r\n    gameObjects.push(projectile = new Projectile(0, 95, ballRadius, 0, 0, currentType));\r\n}\r\n\r\nfunction createOrResetLevel() {\r\n    gameObjects = [];\r\n    firstLayer = [];\r\n\r\n    const minY = -difficulty;\r\n    for (let y = minY; y < 5; y++)\r\n        for (let x = -2; x < (y % 2 ? 2 : 3); x++) {\r\n            const type = Math.floor(Math.min(difficulty + 3, Ball.types.length) * Math.random());\r\n            const gameObject = new Ball(2 * ballRadius * x + (y % 2 ? ballRadius : 0), ballRadius + 2 * ballRadius * y, ballRadius, 0, 0.0005, type);\r\n            gameObjects.push(gameObject);\r\n\r\n            if (y === minY) firstLayer.push(gameObject);\r\n        }\r\n\r\n    backgroundIndex = Math.floor(Math.random() * backgrounds.length);\r\n\r\n    nextProjectileType = getNextProjectileTypes();\r\n    createOrResetProjectile();\r\n}\r\n\r\nfunction resize() {\r\n    const { clientWidth, clientHeight } = canvas;\r\n\r\n    canvas.width = clientWidth;\r\n    canvas.height = clientHeight;\r\n\r\n    renderer.resize(clientWidth, clientHeight);\r\n    framebufferMultisample.resize(clientWidth, clientHeight).attachRenderbuffer(new Renderbuffer(context, clientWidth, clientHeight));\r\n    framebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n    pingFramebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n    pongFramebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n}\r\n\r\nasync function main() {\r\n    canvas = document.getElementById('canvas');\r\n    if (canvas === null) return console.error('#canvas not found');\r\n\r\n    context = canvas.getContext('webgl2', { antialias: false });\r\n    if (context === null) return console.error(\"Can't create webgl context\");\r\n\r\n    sceneShaderProgram = new ShaderProgram(context, SCENE_VERTEX_SHADER_SOURCE, SCENE_FRAGMENT_SHADER_SOURCE);\r\n    screenShaderProgram = new ShaderProgram(context, SCREEN_VERTEX_SHADER_SOURCE, SCREEN_FRAGMENT_SHADER_SOURCE);\r\n    fontShaderProgram = new ShaderProgram(context, FONT_VERTEX_SHADER_SOURCE, FONT_FRAGMENT_SHADER_SOURCE);\r\n    blurShaderProgram = new ShaderProgram(context, BLUR_VERTEX_SHADER_SOURCE, BLUR_FRAGMENT_SHADER_SOURCE);\r\n\r\n    renderer = new Renderer(context, canvas.width, canvas.height);\r\n    spriteBatch = new SpriteBatch(renderer);\r\n    framebufferMultisample = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    framebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    pingFramebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    pongFramebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n\r\n    await Promise.all([\r\n        ...[\r\n            'background_0', 'background_0_blur', 'background_1', 'background_1_blur', 'background_2', 'background_2_blur',\r\n            'ball0', 'ball1', 'ball2', 'ball3', 'ball4', 'ball5', 'ball6', 'ball7',\r\n            'blue_button00', 'circle_05', 'lang_en', 'lang_ru', 'rays', 'white',\r\n        ].map(name => loadImage(`./assets/${name}.png`).then(image => textures[name] = new Texture(context, context.TEXTURE_2D, image.width, image.height, context.SRGB8_ALPHA8).setImage(image))),\r\n        loadImage('./assets/font.png').then(image => textures['font'] = new Texture(context, context.TEXTURE_2D, image.width, image.height, context.RGBA8).setImage(image)),\r\n        loadBinary('./assets/font.bin').then(fontData => font = new Font().deserializeData(fontData)),\r\n    ]);\r\n\r\n    document.addEventListener('visibilitychange', function () {\r\n        if (document.hidden) {\r\n            audioSystem?.suspend();\r\n            paused = true;\r\n        } else {\r\n            audioSystem?.resume();\r\n            paused = false;\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', event => {\r\n        if (audioSystem === null) {\r\n            // Init audio system\r\n            audioSystem = new AudioSystem();\r\n            audioSystem.resume();\r\n\r\n            // Load impact sounds\r\n            Promise.all([\r\n                loadAudio('./assets/impactGlass_light_000.mp3'),\r\n                loadAudio('./assets/impactGlass_light_001.mp3'),\r\n                loadAudio('./assets/impactGlass_light_002.mp3'),\r\n                loadAudio('./assets/impactGlass_light_003.mp3'),\r\n                loadAudio('./assets/impactGlass_light_004.mp3'),\r\n                loadAudio('./assets/impactGlass_medium_000.mp3'),\r\n                loadAudio('./assets/impactGlass_medium_001.mp3'),\r\n                loadAudio('./assets/impactGlass_medium_002.mp3'),\r\n                loadAudio('./assets/impactGlass_medium_003.mp3'),\r\n                loadAudio('./assets/impactGlass_medium_004.mp3'),\r\n            ]).then(result => impactSounds = result);\r\n        }\r\n\r\n        // Language button\r\n        const [x, _y] = positionWorldToScreen(-levelWidth / 2, 0);\r\n        if (event.clientX > x + 10 && event.clientX < x + 10 + 64 && event.clientY > 10 && event.clientY < 10 + 64)\r\n            return nextLanguage();\r\n\r\n        if (state === 'menu') {\r\n            cursorX = event.clientX;\r\n            cursorY = event.clientY;\r\n\r\n            const fontSize = 32;\r\n            const [w, _h] = sizeWorldToScreen(0.8 * levelWidth, 0);\r\n\r\n            if (cursorX > renderer.width / 2 - w / 2 && cursorX < renderer.width / 2 + w / 2) {\r\n                if (cursorY > renderer.height / 2 - fontSize - 72 / 2 && cursorY < renderer.height / 2 - fontSize + 72 / 2) {\r\n                    state = 'idle';\r\n                } else if (cursorY > renderer.height / 2 + fontSize * 2 - 72 / 2 && cursorY < renderer.height / 2 + fontSize * 2 + 72 / 2) {\r\n                    difficulty = 1;\r\n                    score = 0;\r\n                    levelStartScore = 0;\r\n                    state = 'idle';\r\n                    createOrResetLevel();\r\n                }\r\n            }\r\n        }\r\n        else if (state === 'start') {\r\n            state = 'idle';\r\n        } else if (['win', 'fail'].includes(state)) {\r\n            if (typeof window.yandexGamesSDK !== 'undefined') {\r\n                audioSystem?.suspend();\r\n                paused = true;\r\n\r\n                window.yandexGamesSDK.adv.showFullscreenAdv({\r\n                    callbacks: {\r\n                        onClose() {\r\n                            createOrResetLevel();\r\n                            audioSystem?.resume();\r\n                            paused = false;\r\n                            state = 'start';\r\n                        },\r\n                        onError(error) {\r\n                            console.error(error);\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                createOrResetLevel();\r\n                state = 'start';\r\n            }\r\n        }\r\n    });\r\n\r\n    document.addEventListener('contextmenu', event => event.preventDefault());\r\n\r\n    document.addEventListener('pointerdown', event => {\r\n        event.preventDefault();\r\n\r\n        const [x, _y] = positionWorldToScreen(-levelWidth / 2, 0);\r\n        if (event.clientX > x + 10 && event.clientX < x + 10 + 64 && event.clientY > 10 && event.clientY < 10 + 64)\r\n            return;\r\n\r\n        cursorX = event.clientX;\r\n        cursorY = event.clientY;\r\n\r\n        const [_x, y] = positionScreenToWorld(cursorX, cursorY);\r\n        showTrajectory = event.button === 0 && y < 90;\r\n    });\r\n\r\n    document.addEventListener('pointermove', event => {\r\n        event.preventDefault();\r\n\r\n        const [x, _y] = positionWorldToScreen(-levelWidth / 2, 0);\r\n        if (event.clientX > x + 10 && event.clientX < x + 10 + 64 && event.clientY > 10 && event.clientY < 10 + 64)\r\n            return;\r\n\r\n        cursorX = event.clientX;\r\n        cursorY = event.clientY;\r\n\r\n        const [_x, y] = positionScreenToWorld(cursorX, cursorY);\r\n        showTrajectory = event.buttons === 1 && y < 90;\r\n    });\r\n\r\n    document.addEventListener('pointerup', event => {\r\n        event.preventDefault();\r\n\r\n        const [x0, _y0] = positionWorldToScreen(-levelWidth / 2, 0);\r\n        if (event.clientX > x0 + 10 && event.clientX < x0 + 10 + 64 && event.clientY > 10 && event.clientY < 10 + 64)\r\n            return;\r\n\r\n        cursorX = event.clientX;\r\n        cursorY = event.clientY;\r\n\r\n        const [x, y] = positionScreenToWorld(cursorX, cursorY);\r\n        if (state === 'idle' && event.button === 0 && y < 90) {\r\n            state = 'shot';\r\n\r\n            const offsetX = x;\r\n            const offsetY = Math.min(y, 95) - 100;\r\n\r\n            const [directionX, directionY] = normalize(offsetX, offsetY);\r\n\r\n            const speed = 0.05;\r\n\r\n            projectile.velocityX = directionX * speed;\r\n            projectile.velocityY = directionY * speed;\r\n        } else if (state === 'idle' && (event.button === 2 || event.button === 0 && y >= 90)) {\r\n            const type = projectile.type;\r\n            projectile.type = nextProjectileType;\r\n            nextProjectileType = type;\r\n        }\r\n\r\n        showTrajectory = false;\r\n    });\r\n\r\n    resize();\r\n    addEventListener('resize', resize);\r\n\r\n    const deviceLanguage = navigator.language.slice(0, 2).toLowerCase();\r\n    console.log(`Device language: ${deviceLanguage}`);\r\n    setLanguage(deviceLanguage);\r\n\r\n    requestAnimationFrame(update);\r\n\r\n    const lastDifficulty = Number(localStorage.getItem('last_difficulty') || 0);\r\n    if (lastDifficulty > 1) {\r\n        difficulty = lastDifficulty;\r\n        state = 'menu';\r\n    }\r\n\r\n    const lastScore = Number(localStorage.getItem('last_score') || 0);\r\n    if (lastScore > 0) {\r\n        score = lastScore;\r\n        levelStartScore = lastScore;\r\n    }\r\n\r\n    createOrResetLevel();\r\n    console.log('Game ready');\r\n\r\n    await window.yandexGamesSDKPromise;\r\n    window.yandexGamesSDK.features.LoadingAPI?.ready();\r\n    console.log('Yandex Games SDK ready');\r\n\r\n    const yandexGamesSDKLanguage = window.yandexGamesSDK.environment.i18n.lang;\r\n    console.log(`SDK language: ${yandexGamesSDKLanguage}`);\r\n    setLanguage(yandexGamesSDKLanguage);\r\n\r\n    window.yandexGamesSDK.getPlayer({ scopes: false }).then(result => player = result);\r\n}\r\n\r\nfunction setLanguage(value) {\r\n    const availableLanguages = Object.keys(translations);\r\n    if (availableLanguages.includes(value))\r\n        language = value;\r\n    else if (['be', 'kk', 'uk', 'uz'].includes(value))\r\n        language = 'ru';\r\n    else\r\n        language = 'en';\r\n\r\n    console.log(`Language changed to ${language}`);\r\n}\r\n\r\nfunction nextLanguage() {\r\n    const availableLanguages = Object.keys(translations);\r\n    const languageIndex = availableLanguages.findIndex(item => item === language);\r\n    if (languageIndex === -1 || languageIndex === availableLanguages.length - 1)\r\n        setLanguage(availableLanguages[0]);\r\n    else\r\n        setLanguage(availableLanguages[languageIndex + 1]);\r\n\r\n}\r\n\r\nfunction getLinkedBalls(ball, except = []) {\r\n    const linked = new Set([ball]);\r\n    const checked = new Set();\r\n    const queue = [ball];\r\n    while (queue.length > 0) {\r\n        const ball = queue.pop();\r\n        const neighbours = getNeighbourBalls(ball).filter(ball => !except.includes(ball));\r\n        for (const neighbour of neighbours) {\r\n            if (!checked.has(neighbour)) {\r\n                linked.add(neighbour);\r\n                queue.push(neighbour);\r\n            }\r\n\r\n            checked.add(neighbour);\r\n        }\r\n    }\r\n\r\n    return [...linked];\r\n}\r\n\r\nfunction getLinkedBallsOfSameType(ball) {\r\n    const linked = new Set([ball]);\r\n    const checked = new Set();\r\n    const queue = [ball];\r\n    while (queue.length > 0) {\r\n        const ball = queue.pop();\r\n        const neighbours = getNeighbourBalls(ball);\r\n        for (const neighbour of neighbours) {\r\n            if (!checked.has(neighbour) && neighbour.type === ball.type) {\r\n                linked.add(neighbour);\r\n                queue.push(neighbour);\r\n            }\r\n\r\n            checked.add(neighbour);\r\n        }\r\n    }\r\n\r\n    return [...linked];\r\n}\r\n\r\nfunction getNeighbourBalls(ball) {\r\n    const neighbours = [];\r\n    for (const gameObject of gameObjects) {\r\n        if (gameObject.objectType !== 'Ball' || gameObject === ball) continue;\r\n\r\n        const distance = magnitude(ball.x - gameObject.x, ball.y - gameObject.y);\r\n        if (distance < (gameObject.radius + ball.radius) * 1.25) {\r\n            neighbours.push(gameObject);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nfunction playImpactSound() {\r\n    if (impactSounds.length === 0) return;\r\n\r\n    audioSystem.play(impactSounds[nextImpactSound++ % impactSounds.length]);\r\n}\r\n\r\n/** @type {Set<GameObject>} */\r\nconst objectDeleteQueue = new Set();\r\n\r\n/**\r\n * @param {GameObject} gameObject\r\n */\r\nfunction removeObject(gameObject) {\r\n    objectDeleteQueue.add(gameObject);\r\n}\r\n\r\nconst MAX_DELTA_TIME = 1000 / 30;\r\n\r\nfunction update(timestamp) {\r\n    requestAnimationFrame(update);\r\n\r\n    const deltaTime = Math.min((prevTimestamp !== null) ? timestamp - prevTimestamp : 0, MAX_DELTA_TIME);\r\n    prevTimestamp = timestamp;\r\n\r\n    for (const gameObject of gameObjects)\r\n        gameObject.update(deltaTime);\r\n\r\n    // If all balls are on top, pull them down\r\n    if (state === 'idle') {\r\n        let maxY = 0;\r\n        const balls = gameObjects.filter(gameObject => gameObject.objectType === 'Ball');\r\n        for (const ball of balls) {\r\n            if (ball.y > maxY)\r\n                maxY = ball.y;\r\n        }\r\n\r\n        const [_x, y] = positionScreenToWorld(0, 0);\r\n        if (maxY < y + 4 * ballRadius && maxY < 50) {\r\n            for (const ball of balls)\r\n                ball.y += deltaTime / 100;\r\n        }\r\n    }\r\n\r\n    if (state === 'shot') {\r\n        // Check ball/projectile collision\r\n        for (const gameObject of gameObjects) {\r\n            if (gameObject.objectType !== 'Ball') continue;\r\n\r\n            const offsetX = projectile.x - gameObject.x;\r\n            const offsetY = projectile.y - gameObject.y;\r\n            const distance = magnitude(offsetX, offsetY);\r\n            if (distance < (gameObject.radius + projectile.radius) * 0.9) {\r\n                let x = gameObject.x;\r\n                let y = gameObject.y;\r\n                if (offsetY * offsetY > offsetX * offsetX) {\r\n                    x += (offsetX > 0 ? gameObject.radius : -gameObject.radius);\r\n                    y += 2 * gameObject.radius;\r\n                } else {\r\n                    x += (offsetX > 0 ? 2 * gameObject.radius : -2 * gameObject.radius);\r\n                }\r\n\r\n                playImpactSound();\r\n\r\n                // Add ball on the contact point\r\n                const ball = new Ball(x, y, gameObject.radius, gameObject.velocityX, gameObject.velocityY, projectile.type);\r\n                gameObjects.push(ball);\r\n\r\n                const linkedSet = new Set(getLinkedBallsOfSameType(ball));\r\n                if (linkedSet.size > 2) {\r\n                    for (const ball of [...linkedSet]) {\r\n                        // Remove linked balls\r\n                        removeObject(ball);\r\n                        score += Ball.types[ball.type].score;\r\n\r\n                        // Create exploding ball for removed linked balls\r\n                        gameObjects.push(new ExplodingBall(ball.x, ball.y, ballRadius, ball.velocityX, ball.velocityY, ball.type));\r\n\r\n                        // Create particles for removed linked balls\r\n                        for (let i = 0; i < 10; i++) {\r\n                            let velocityX = 2 * Math.random() - 1;\r\n                            let velocityY = 2 * Math.random() - 1;\r\n                            [velocityX, velocityY] = normalize(velocityX, velocityY);\r\n\r\n                            velocityX *= 0.025;\r\n                            velocityY *= 0.025;\r\n\r\n                            const particleRadius = ballRadius * 0.25;\r\n                            gameObjects.push(new Particle(ball.x, ball.y, particleRadius, velocityX, velocityY, ball.type));\r\n                        }\r\n                    }\r\n\r\n                    let timeOffset = 0;\r\n                    for (const ball of [...linkedSet]) {\r\n                        timeOffset += 50 + Math.random() * 50;\r\n                        setTimeout(playImpactSound, timeOffset);\r\n                    }\r\n\r\n                    // Find neighbour balls\r\n                    const neighboursSet = new Set();\r\n                    for (const ball of [...linkedSet]) {\r\n                        const ballNeighbours = getNeighbourBalls(ball).filter(ball => !linkedSet.has(ball));\r\n                        for (const ball of ballNeighbours)\r\n                            neighboursSet.add(ball);\r\n                    }\r\n\r\n                    // Find detached balls\r\n                    const detachedSet = new Set();\r\n                    const firstLayerSet = new Set(firstLayer.filter(ball => !linkedSet.has(ball)));\r\n                    for (const neighbour of [...neighboursSet]) {\r\n                        const linkedToNeighbour = getLinkedBalls(neighbour, [...linkedSet]);\r\n                        if (linkedToNeighbour.filter(ball => firstLayerSet.has(ball)).length === 0)\r\n                            for (const ball of linkedToNeighbour)\r\n                                detachedSet.add(ball);\r\n                    }\r\n\r\n                    if (detachedSet.size) {\r\n                        for (const ball of [...detachedSet]) {\r\n                            // Remove detached balls\r\n                            removeObject(ball);\r\n                            score += Ball.types[ball.type].score;\r\n\r\n                            // Create falling balls for removed detached balls\r\n                            const velocityX = (2 * Math.random() - 1) * 0.001;\r\n                            const velocityY = ball.velocityY;\r\n                            gameObjects.push(new FallingBall(ball.x, ball.y, ballRadius, velocityX, velocityY, ball.type));\r\n                        }\r\n                    }\r\n\r\n                    // Check first layer for orphan balls\r\n                    const orphansSet = new Set();\r\n                    for (const ball of firstLayer.filter(ball => !linkedSet.has(ball)).filter(ball => !detachedSet.has(ball)))\r\n                        if (getLinkedBalls(ball, [...linkedSet, ...detachedSet]).length === 1)\r\n                            orphansSet.add(ball);\r\n\r\n                    if (orphansSet.size) {\r\n                        for (const ball of [...orphansSet]) {\r\n                            // Remove orphan balls\r\n                            removeObject(ball);\r\n                            score += Ball.types[ball.type].score;\r\n\r\n                            // Create falling balls for removed orphan balls\r\n                            gameObjects.push(new FallingBall(ball.x, ball.y, ballRadius, ball.velocityX, ball.velocityY, ball.type));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                setTimeout(createOrResetProjectile);\r\n                state = 'idle';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reset projectile if outside the level\r\n    if (projectile !== null && (projectile.y < 0 || projectile.y > 100)) {\r\n        setTimeout(createOrResetProjectile);\r\n        state = 'idle';\r\n    }\r\n\r\n    if (objectDeleteQueue.size) {\r\n        gameObjects = gameObjects.filter(gameObject => !objectDeleteQueue.has(gameObject));\r\n        firstLayer = firstLayer.filter(gameObject => !objectDeleteQueue.has(gameObject));\r\n        objectDeleteQueue.clear();\r\n    }\r\n\r\n    // Set state to fail if any ball reached bottom\r\n    if (state === 'idle') {\r\n        const balls = gameObjects.filter(gameObject => gameObject.objectType === 'Ball');\r\n        for (const ball of balls) {\r\n            if (ball.y + ball.radius > 90) {\r\n                score = levelStartScore;\r\n                state = 'fail';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set state to win if all balls destroyed\r\n    if (state === 'idle' && gameObjects.filter(gameObject => ['Ball', 'FallingBall', 'ExplodingBall', 'Particle'].includes(gameObject.objectType)).length === 0) {\r\n        difficulty++;\r\n        levelStartScore = score;\r\n\r\n        localStorage.setItem('last_difficulty', difficulty);\r\n        localStorage.setItem('last_score', score);\r\n\r\n        state = 'win';\r\n\r\n        // Submit score\r\n        if (player !== null && typeof window.yandexGamesSDK !== 'undefined') {\r\n            window.yandexGamesSDK.isAvailableMethod('leaderboards.setLeaderboardScore').then(result => {\r\n                if (!result) return;\r\n\r\n                window.yandexGamesSDK.getLeaderboards().then(leaderboards => leaderboards.setLeaderboardScore(LEADERBOARD, score));\r\n            })\r\n        }\r\n    }\r\n\r\n    framebufferMultisample.bind();\r\n    renderer.clear(Math.pow(0.63, 2.2), Math.pow(0.88, 2.2), Math.pow(0.98, 2.2), 1);\r\n    sceneShaderProgram.bind().setUniformMatrix('matrix', renderer.matrix);\r\n\r\n    if (state === 'menu') {\r\n        // Draw background\r\n        {\r\n            spriteBatch.begin();\r\n\r\n            const texture = textures[backgrounds[backgroundIndex].blurTextureName];\r\n            const scale = renderer.height / 100;\r\n            const x = renderer.width / 2;\r\n            const y = renderer.height / 2;\r\n            const w = 4 * levelWidth * scale;\r\n            const h = 2 * renderer.height;\r\n\r\n            spriteBatch.drawRectangleOffCenter(texture, x - w, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.drawRectangleOffCenter(texture, x, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.drawRectangleOffCenter(texture, x + w, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n\r\n            const texture1 = textures[backgrounds[backgroundIndex].textureName];\r\n            const [w1, _h1] = sizeWorldToScreen(levelWidth, 0);\r\n            spriteBatch.drawRectangleOffCenter(texture1, renderer.width / 2, renderer.height / 2, w1, renderer.height, 0, 0, 1, 1, 1, 1, 1, 1);\r\n\r\n            spriteBatch.end();\r\n        }\r\n\r\n        // Draw text background\r\n        spriteBatch.begin();\r\n        spriteBatch.drawRectangle(textures['white'], 0, 0, renderer.width, renderer.height, 0, 0, 1, 1, 0, 0, 0, 0.75);\r\n        spriteBatch.drawRotatedRectangleOffCenter(textures['rays'], renderer.width / 2, renderer.height / 2, renderer.height * 0.5, renderer.height * 0.5, timestamp / 10000, 0, 0, 1, 1, 1, 1, 1, 0.5);\r\n        spriteBatch.end();\r\n\r\n        // Draw language button\r\n        {\r\n            const [x, _y] = positionWorldToScreen(-levelWidth / 2, 0);\r\n            spriteBatch.begin();\r\n            spriteBatch.drawRectangle(textures[`lang_${language}`], x + 10, 10, 64, 64, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.end();\r\n        }\r\n\r\n        const fontSize = 32;\r\n\r\n        // Draw buttons\r\n        {\r\n            const [w, _h] = sizeWorldToScreen(0.8 * levelWidth, 0);\r\n\r\n            spriteBatch.begin();\r\n            spriteBatch.drawRectangleOffCenter(textures['blue_button00'], renderer.width / 2, renderer.height / 2 - fontSize * 1.0, w, 72, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.drawRectangleOffCenter(textures['blue_button00'], renderer.width / 2, renderer.height / 2 + fontSize * 2.0, w, 72, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.end();\r\n        }\r\n\r\n        // Draw text\r\n        if (font !== null) {\r\n            const atlasPxRange = 8;\r\n            const atlasGlyphSize = 40;\r\n            fontShaderProgram.bind()\r\n                .setUniformMatrix('matrix', renderer.matrix)\r\n                .setUniform('screenPxRange', Math.max(2, fontSize * atlasPxRange / atlasGlyphSize))\r\n                .setUniform('outlineBias', 0.25);\r\n\r\n            textures['font'].bind();\r\n            renderer.beginGeometry();\r\n\r\n            renderer.drawStringOffCenter(font, renderer.width / 2, renderer.height / 2 - fontSize * 2.25, translations[language].continue, fontSize, 1, 1, 1, 1);\r\n            renderer.drawStringOffCenter(font, renderer.width / 2, renderer.height / 2 - fontSize * 1.25, translations[language].level + ' ' + difficulty, fontSize * 0.75, 1, 1, 1, 1);\r\n\r\n            renderer.drawStringOffCenter(font, renderer.width / 2, renderer.height / 2 + fontSize * 1.25, translations[language].newGame, fontSize, 1, 1, 1, 1);\r\n\r\n            renderer.endGeometry();\r\n        }\r\n    } else {\r\n        spriteBatch.begin();\r\n\r\n        // Draw background\r\n        {\r\n            const texture = textures[backgrounds[backgroundIndex].blurTextureName];\r\n            const scale = renderer.height / 100;\r\n            const x = renderer.width / 2;\r\n            const y = renderer.height / 2;\r\n            const w = 4 * levelWidth * scale;\r\n            const h = 2 * renderer.height;\r\n\r\n            spriteBatch.drawRectangleOffCenter(texture, x - w, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.drawRectangleOffCenter(texture, x, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.drawRectangleOffCenter(texture, x + w, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n\r\n            const texture1 = textures[backgrounds[backgroundIndex].textureName];\r\n            const [w1, _h1] = sizeWorldToScreen(levelWidth, 0);\r\n            spriteBatch.drawRectangleOffCenter(texture1, renderer.width / 2, renderer.height / 2, w1, renderer.height, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        }\r\n\r\n        for (const gameObject of gameObjects)\r\n            gameObject.draw();\r\n\r\n        // Draw next projectile type\r\n        {\r\n            const nextProjectileRadius = ballRadius * 0.5;\r\n            const [x, y] = positionWorldToScreen(-7, 95);\r\n            const [w, h] = sizeWorldToScreen(2 * nextProjectileRadius, 2 * nextProjectileRadius);\r\n            spriteBatch.drawRectangleOffCenter(textures[Ball.types[nextProjectileType].texture], x, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        }\r\n\r\n        if (showTrajectory && state === 'idle' && projectile !== null)\r\n            drawTrajectory();\r\n\r\n        // Draw border\r\n        {\r\n            const [x, y] = positionWorldToScreen(0, 90);\r\n            const [w, h] = sizeWorldToScreen(levelWidth, 0.2);\r\n            spriteBatch.drawRectangleOffCenter(textures['white'], x, y, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        }\r\n\r\n        // Draw text background\r\n        if (['start', 'win', 'fail'].includes(state)) {\r\n            spriteBatch.drawRectangle(textures['white'], 0, 0, renderer.width, renderer.height, 0, 0, 1, 1, 0, 0, 0, 0.75);\r\n            spriteBatch.drawRotatedRectangleOffCenter(textures['rays'], renderer.width / 2, renderer.height / 2, renderer.height * 0.5, renderer.height * 0.5, timestamp / 10000, 0, 0, 1, 1, 1, 1, 1, 0.5);\r\n        }\r\n\r\n        spriteBatch.end();\r\n\r\n        // Draw language button\r\n        {\r\n            const [x, _y] = positionWorldToScreen(-levelWidth / 2, 0);\r\n            spriteBatch.begin();\r\n            spriteBatch.drawRectangle(textures[`lang_${language}`], x + 10, 10, 64, 64, 0, 0, 1, 1, 1, 1, 1, 1);\r\n            spriteBatch.end();\r\n        }\r\n\r\n        // Draw text\r\n        if (font !== null) {\r\n            const fontSize = 32;\r\n            const atlasPxRange = 8;\r\n            const atlasGlyphSize = 40;\r\n            fontShaderProgram.bind()\r\n                .setUniformMatrix('matrix', renderer.matrix)\r\n                .setUniform('screenPxRange', Math.max(2, fontSize * atlasPxRange / atlasGlyphSize))\r\n                .setUniform('outlineBias', 0.25);\r\n\r\n            const [x, y] = sizeWorldToScreen(levelWidth / 2, 0);\r\n            const scoreStr = score.toString().padStart(6, '0') + ' ';\r\n            const scoreWidth = renderer.measureString(font, scoreStr, fontSize);\r\n\r\n            spriteBatch.begin();\r\n            spriteBatch.drawString(textures['font'], font, x + renderer.width / 2 - scoreWidth, y, scoreStr, fontSize, 1, 1, 1, 1);\r\n\r\n            if (state === 'start') {\r\n                if (difficulty === 1) {\r\n                    spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 - fontSize * 1.75, translations[language].press, fontSize, 1, 1, 1, 1);\r\n                    spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 - fontSize * 0.5, translations[language].toStartGame, fontSize, 1, 1, 1, 1);\r\n                } else {\r\n                    spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 - fontSize * 0.75, translations[language].level + ' ' + difficulty, fontSize, 1, 1, 1, 1);\r\n\r\n                    spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 2.75, translations[language].press, fontSize * 0.75, 1, 1, 1, 1);\r\n                    spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 3.75, translations[language].toContinue, fontSize * 0.75, 1, 1, 1, 1);\r\n                }\r\n            } else if (state === 'win') {\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 - fontSize * 0.75, translations[language].win, fontSize, 1, 1, 1, 1);\r\n\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 2.75, translations[language].press, fontSize * 0.75, 1, 1, 1, 1);\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 3.75, translations[language].toContinue, fontSize * 0.75, 1, 1, 1, 1);\r\n            } else if (state === 'fail') {\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 - fontSize * 0.75, translations[language].fail, fontSize, 1, 1, 1, 1);\r\n\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 2.75, translations[language].press, fontSize * 0.75, 1, 1, 1, 1);\r\n                spriteBatch.drawStringOffCenter(textures['font'], font, renderer.width / 2, renderer.height / 2 + fontSize * 3.75, translations[language].toContinue, fontSize * 0.75, 1, 1, 1, 1);\r\n            }\r\n\r\n            spriteBatch.end();\r\n        }\r\n    }\r\n\r\n    framebufferMultisample.unbind();\r\n    framebufferMultisample.blit(framebuffer);\r\n\r\n    framebufferMultisample.bind();\r\n    renderer.clear(0, 0, 0, 0);\r\n    sceneShaderProgram.bind().setUniformMatrix('matrix', renderer.matrix);\r\n\r\n    if (showTrajectory && state === 'idle' && projectile !== null) {\r\n        spriteBatch.begin();\r\n\r\n        projectile.draw();\r\n        drawTrajectory();\r\n\r\n        spriteBatch.end();\r\n    }\r\n\r\n    framebufferMultisample.unbind();\r\n    framebufferMultisample.blit(pongFramebuffer);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        blurShaderProgram.bind().setUniform('horizontal', true);\r\n        pingFramebuffer.bind();\r\n        pongFramebuffer.attachment.bind();\r\n        renderer.beginGeometry();\r\n        renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        renderer.endGeometry();\r\n        pingFramebuffer.unbind();\r\n\r\n        blurShaderProgram.bind().setUniform('horizontal', false);\r\n        pongFramebuffer.bind();\r\n        pingFramebuffer.attachment.bind();\r\n        renderer.beginGeometry();\r\n        renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        renderer.endGeometry();\r\n        pongFramebuffer.unbind();\r\n    }\r\n\r\n    context.viewport(0, 0, renderer.width, renderer.height);\r\n    screenShaderProgram.bind().setUniformInteger('blurTexture', 1).setUniform('blurBrightness', (Math.sin(8 * timestamp / 1000) + 1) / 2);\r\n    framebuffer.attachment.bind();\r\n    pongFramebuffer.attachment.bind(1);\r\n    renderer.beginGeometry();\r\n    renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    renderer.endGeometry();\r\n}\r\n\r\nfunction drawTrajectory() {\r\n    let [clientX, clientY] = positionScreenToWorld(cursorX, cursorY);\r\n    clientY = Math.min(clientY, 95);\r\n\r\n    const offsetX = clientX;\r\n    const offsetY = clientY - 100;\r\n\r\n    let [directionX, directionY] = normalize(offsetX, offsetY);\r\n\r\n    let x = projectile.x;\r\n    let y = projectile.y;\r\n\r\n    const balls = gameObjects.filter(gameObject => gameObject.objectType === 'Ball');\r\n\r\n    for (let i = 1; i <= 1000; i++) {\r\n        x += directionX / 10;\r\n        y += directionY / 10;\r\n\r\n        if (x - projectile.radius < -levelWidth / 2 || x + projectile.radius > levelWidth / 2) {\r\n            directionX = -directionX;\r\n        }\r\n\r\n        if (i % 50 === 0) {\r\n            for (const ball of balls) {\r\n                if (dot2(x - ball.x, y - ball.y) < 1.5 * ballRadius * ballRadius)\r\n                    return;\r\n            }\r\n\r\n            const trajectoryBallRadius = ballRadius / 3;\r\n            const [x1, y1] = positionWorldToScreen(x, y);\r\n            const [w, h] = sizeWorldToScreen(2 * trajectoryBallRadius, 2 * trajectoryBallRadius);\r\n            spriteBatch.drawRectangleOffCenter(textures['circle_05'], x1, y1, w, h, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction saveFile(name, data) {\r\n    const url = URL.createObjectURL(new Blob([data]));\r\n\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = name;\r\n\r\n    document.body.appendChild(link);\r\n    link.click();\r\n\r\n    setTimeout(() => {\r\n        link.remove();\r\n        URL.revokeObjectURL(url);\r\n    });\r\n}\r\n\r\n(document.readyState === 'loading') ? document.addEventListener('DOMContentLoaded', main) : main();\r\n", "\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/js/index.js\";\n              export default OriginalModule.default;\n              export * from \"./src/js/index.js\";"],
  "mappings": "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",
  "names": ["_global", "e", "n", "AudioSystem", "context", "gainNode", "buffer", "loop", "source", "Renderbuffer", "context", "width", "height", "handle", "Framebuffer", "texture", "attachment", "renderbuffer", "framebuffer", "Shader", "type", "source", "ShaderProgram", "vertexShaderSource", "fragmentShaderSource", "vertexShader", "fragmentShader", "name", "uniformLocationCache", "value", "location", "transpose", "Texture", "internalFormat", "textureUnit", "image", "Buffer", "data", "usage", "offset", "count", "VertexAttribute", "elements", "normalized", "stride", "VertexArray", "buffer", "vertexAttributes", "vertexAttribute", "vertexCount", "Mesh", "vertexElements", "vertexBuffer", "vertexArray", "Font", "atlasWidth", "atlasHeight", "lines", "line", "values", "charCode", "advance", "planeLeft", "planeBottom", "planeRight", "planeTop", "atlasLeft", "atlasBottom", "atlasRight", "atlasTop", "index", "glyphs", "glyph", "Renderer", "__publicField", "left", "right", "bottom", "top", "near", "far", "leftRight", "bottomTop", "nearFar", "scaleX", "scaleY", "scaleZ", "translateX", "translateY", "translateZ", "r", "g", "b", "a", "VERTEX_ELEMENTS", "vertices", "_x", "_y", "_u", "_v", "_r", "_g", "_b", "_a", "i", "ax", "ay", "au", "av", "bx", "by", "bu", "bv", "cx", "cy", "cu", "cv", "MAX_VERTICES", "dx", "dy", "du", "dv", "x", "y", "u0", "v0", "u1", "v1", "halfWidth", "halfHeight", "angle", "sinA", "cosA", "ax0", "ay0", "bx0", "by0", "cx0", "cy0", "dx0", "dy0", "font", "size", "str", "SpriteBatch", "renderer", "commands", "args", "command", "_ax", "_ay", "_au", "_av", "_bx", "_by", "_bu", "_bv", "_cx", "_cy", "_cu", "_cv", "_dx", "_dy", "_du", "_dv", "_width", "_height", "_u0", "_v0", "_u1", "_v1", "_angle", "_font", "_charCode", "_size", "_str", "GameObject", "deltaTime", "_Ball", "x", "y", "radius", "velocityX", "velocityY", "type", "paused", "state", "projectile", "distanceX", "distanceY", "distance", "magnitude", "directionX", "directionY", "normalize", "texture", "textures", "positionWorldToScreen", "w", "h", "sizeWorldToScreen", "spriteBatch", "__publicField", "Ball", "Projectile", "levelWidth", "playImpactSound", "Particle", "removeObject", "FallingBall", "alpha", "ExplodingBall", "SCENE_VERTEX_SHADER_SOURCE", "SCENE_FRAGMENT_SHADER_SOURCE", "FONT_VERTEX_SHADER_SOURCE", "FONT_FRAGMENT_SHADER_SOURCE", "BLUR_VERTEX_SHADER_SOURCE", "BLUR_FRAGMENT_SHADER_SOURCE", "SCREEN_VERTEX_SHADER_SOURCE", "SCREEN_FRAGMENT_SHADER_SOURCE", "canvas", "context", "prevTimestamp", "sceneShaderProgram", "screenShaderProgram", "fontShaderProgram", "blurShaderProgram", "font", "renderer", "framebufferMultisample", "framebuffer", "pingFramebuffer", "pongFramebuffer", "audioSystem", "impactSounds", "nextImpactSound", "gameObjects", "firstLayer", "nextProjectileType", "ballRadius", "difficulty", "score", "levelStartScore", "cursorX", "cursorY", "showTrajectory", "LEADERBOARD", "player", "backgrounds", "backgroundIndex", "PADDING_BOTTOM", "translations", "language", "loadBinary", "url", "loadImage", "resolve", "image", "loadAudio", "buffer", "audioSystem", "positionWorldToScreen", "x", "y", "offsetX", "renderer", "offsetY", "PADDING_BOTTOM", "scale", "positionScreenToWorld", "sizeWorldToScreen", "dot2", "x", "y", "magnitude", "normalize", "length", "getBallTypesOnBoard", "types", "gameObject", "gameObjects", "getBallAt", "balls", "ball", "raycastBall", "dx", "dy", "step", "ballRadius", "levelWidth", "getNextProjectileTypes", "foundSet", "y0", "x0", "found", "linkedCount", "getLinkedBallsOfSameType", "i", "getNextProjectileType", "typesOnBoard", "createOrResetProjectile", "projectile", "currentType", "nextProjectileType", "Projectile", "createOrResetLevel", "firstLayer", "minY", "difficulty", "type", "Ball", "backgroundIndex", "backgrounds", "resize", "clientWidth", "clientHeight", "canvas", "renderer", "framebufferMultisample", "Renderbuffer", "context", "framebuffer", "Texture", "pingFramebuffer", "pongFramebuffer", "main", "sceneShaderProgram", "ShaderProgram", "SCENE_VERTEX_SHADER_SOURCE", "SCENE_FRAGMENT_SHADER_SOURCE", "screenShaderProgram", "SCREEN_VERTEX_SHADER_SOURCE", "SCREEN_FRAGMENT_SHADER_SOURCE", "fontShaderProgram", "FONT_VERTEX_SHADER_SOURCE", "FONT_FRAGMENT_SHADER_SOURCE", "blurShaderProgram", "BLUR_VERTEX_SHADER_SOURCE", "BLUR_FRAGMENT_SHADER_SOURCE", "Renderer", "spriteBatch", "SpriteBatch", "Framebuffer", "name", "loadImage", "image", "textures", "loadBinary", "fontData", "font", "Font", "audioSystem", "paused", "event", "AudioSystem", "loadAudio", "result", "impactSounds", "_y", "positionWorldToScreen", "nextLanguage", "state", "cursorX", "cursorY", "fontSize", "w", "_h", "sizeWorldToScreen", "score", "levelStartScore", "error", "_x", "positionScreenToWorld", "showTrajectory", "_y0", "offsetX", "offsetY", "directionX", "directionY", "speed", "deviceLanguage", "setLanguage", "update", "lastDifficulty", "lastScore", "yandexGamesSDKLanguage", "player", "value", "translations", "language", "availableLanguages", "languageIndex", "item", "getLinkedBalls", "except", "linked", "checked", "queue", "neighbours", "getNeighbourBalls", "neighbour", "playImpactSound", "nextImpactSound", "objectDeleteQueue", "removeObject", "MAX_DELTA_TIME", "timestamp", "deltaTime", "prevTimestamp", "maxY", "linkedSet", "ExplodingBall", "velocityX", "velocityY", "particleRadius", "Particle", "timeOffset", "neighboursSet", "ballNeighbours", "detachedSet", "firstLayerSet", "linkedToNeighbour", "FallingBall", "orphansSet", "leaderboards", "LEADERBOARD", "texture", "scale", "h", "texture1", "w1", "_h1", "nextProjectileRadius", "drawTrajectory", "scoreStr", "scoreWidth", "clientX", "clientY", "trajectoryBallRadius", "x1", "y1", "main", "js_default"]
}
